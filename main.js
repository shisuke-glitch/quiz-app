
// main.js

// ‚ñº‚ñº‚ñº Firebase v9„ÅÆÈñ¢Êï∞„Çí„Ç§„É≥„Éù„Éº„Éà ‚ñº‚ñº‚ñº
import { initializeApp } from "firebase/app";
import { getAuth, signInAnonymously, onAuthStateChanged, signOut } from "firebase/auth";
import { getDatabase, ref, runTransaction, onValue, onDisconnect, get, set, update } from "firebase/database";

// „ÅÇ„Å™„Åü„ÅÆFirebase„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆË®≠ÂÆöÊÉÖÂ†±
const firebaseConfig = {
  apiKey: "AIzaSyCwRAgSfOOPpOrEH7wJdCmLHtOgJOb2ZKg",// 
  authDomain: "quiz-app-ab0b2.firebaseapp.com",
  databaseURL: "https://quiz-app-ab0b2-default-rtdb.firebaseio.com",
  projectId: "quiz-app-ab0b2",
  storageBucket: "quiz-app-ab0b2.appspot.com",
  messagingSenderId: "825831547139",
  appId: "1:825831547139:web:e49f693e37afa444b18936",
  measurementId: "G-RYX5Z4YHDC"
};

// Firebase„ÇíÂàùÊúüÂåñ„Åó„Åæ„Åô
// ‚ñ≤‚ñ≤‚ñ≤ ‰ª•‰∏ã„Å´Êõ∏„ÅçÊèõ„Åà„Çã ‚ñ≤‚ñ≤‚ñ≤
// --- Firebase„ÅÆÂàùÊúüÂåñÔºàË™çË®º„ÇíËøΩÂä†Ôºâ ---
firebase.initializeApp(firebaseConfig);
const db = firebase.database();
const auth = firebase.auth(); // Ë™çË®º„ÇíËøΩÂä†

// Ë™çË®ºÁä∂ÊÖã„ÅÆÁõ£Ë¶ñ
let currentUserId = null;
auth.onAuthStateChanged((user) => {
    if (user) {
        currentUserId = user.uid;
        console.log('Ë™çË®ºÂÆå‰∫Ü:', currentUserId);
    } else {
        console.log('Êú™Ë™çË®º');
    }
});


// ‚òÖ‚òÖ‚òÖ „Åì„Åì„Å´Êñ∞„Åó„ÅèËøΩÂä† ‚òÖ‚òÖ‚òÖ
// „Ç¢„Éó„É™ÂàùÊúüÂåñÊôÇ„Å´Ë™çË®ºÁä∂ÊÖãÁõ£Ë¶ñ„ÇíÈñãÂßã
function initializeAuth() {
    return new Promise((resolve) => {
        console.log('üîÑ Ë™çË®º„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ‰∏≠...');
        
        const unsubscribe = onAuthStateChanged(auth, (user) => {
            console.log('üîî Ë™çË®ºÁä∂ÊÖãÂ§âÊõ¥:', user ? `Ë™çË®ºÊ∏à„Åø(${user.uid})` : 'Êú™Ë™çË®º');
            
            if (user) {
                currentPlayerId = user.uid;
                authenticationComplete = true;
                console.log('‚úÖ Ë™çË®º„Ç∑„Çπ„ÉÜ„É†Ê∫ñÂÇôÂÆå‰∫Ü');
                unsubscribe();
                resolve(user);
            }
        });
    });
}
// Ë™çË®º„ÅåÂÆå‰∫Ü„Åô„Çã„Åæ„ÅßÂæÖ„Å§„Éò„É´„Éë„ÉºÈñ¢Êï∞
function waitForAuth() {
    return new Promise((resolve) => {
        if (isAuthReady) {
            resolve(currentUser);
            return;
        }
        
        const unsubscribe = onAuthStateChanged(auth, (user) => {
            unsubscribe();
            currentUser = user;
            isAuthReady = true;
            resolve(user);
        });
    });
}

// ÂåøÂêçË™çË®º„ÇíË°å„ÅÑ„ÄÅÂÆå‰∫Ü„Åæ„ÅßÂæÖ„Å§Èñ¢Êï∞
async function ensureAuthenticated() {
    // Êó¢„Å´Ë™çË®ºÊ∏à„Åø„ÅÆÂ†¥Âêà„ÅØ„Åù„ÅÆ„Åæ„ÅæËøî„Åô
    await waitForAuth();
    
    if (currentUser) {
        console.log('Êó¢„Å´Ë™çË®ºÊ∏à„Åø:', currentUser.uid);
        return currentUser;
    }
    
    // Êú™Ë™çË®º„ÅÆÂ†¥Âêà„ÄÅÂåøÂêçË™çË®º„ÇíÂÆüË°å
    console.log('ÂåøÂêçË™çË®º„ÇíÈñãÂßã...');
    await signInAnonymously(auth);
    
    // Ë™çË®ºÂÆå‰∫Ü„ÇíÂæÖ„Å§
    return await waitForAuth();
}


// Ë™çË®ºÁä∂ÊÖã„ÇíÁ¢∫ÂÆü„Å´Á¢∫Ë™ç„Åô„ÇãÈñ¢Êï∞
async function ensureUserAuthenticated() {
    console.log('üîç Ë™çË®ºÁä∂ÊÖã„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠...');
    
    // Êó¢„Å´Ë™çË®ºÂÆå‰∫Ü„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà
    if (authenticationComplete && auth.currentUser) {
        console.log('‚úÖ Êó¢„Å´Ë™çË®ºÊ∏à„Åø:', auth.currentUser.uid);
        return auth.currentUser;
    }
    
    // Ë™çË®º„ÅåÊú™ÂÆå‰∫Ü„ÅÆÂ†¥Âêà„ÄÅÂåøÂêçË™çË®º„ÇíÂÆüË°å
    console.log('üöÄ ÂåøÂêçË™çË®ºÈñãÂßã...');
    
    try {
        const userCredential = await signInAnonymously(auth);
        
        // Ë™çË®ºÂÆå‰∫ÜÂæå„ÄÅ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„É´„Éº„É´„Å´ÂèçÊò†„Åï„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
        console.log('‚è≥ „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É´„Éº„É´ÂèçÊò†ÂæÖÊ©ü...');
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // Ë™çË®ºÁä∂ÊÖã„ÇíÂÜçÁ¢∫Ë™ç
        if (!auth.currentUser) {
            throw new Error('Ë™çË®ºÂæå„Å´„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì');
        }
        
        authenticationComplete = true;
        currentPlayerId = auth.currentUser.uid;
        console.log('‚úÖ Ë™çË®ºÂÆåÂÖ®ÂÆå‰∫Ü:', currentPlayerId);
        
        return auth.currentUser;
        
    } catch (error) {
        console.error('‚ùå Ë™çË®º„Ç®„É©„Éº:', error);
        throw error;
    }
}


// Firebase„ÅÆÂêÑ„Çµ„Éº„Éì„Çπ„ÇíÂà©Áî®ÂèØËÉΩ„Å´„Åó„Åæ„Åô
export const db = getDatabase(app);       // Realtime Database „ÅÆ„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíÂèñÂæó
export const auth = getAuth(app);         // Firebase Authentication „ÅÆ„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíÂèñÂæó
const analytics = getAnalytics(app);      // Google Analytics (‰ªªÊÑè)

// ‚ñ≤‚ñ≤‚ñ≤ „ÅÇ„Å™„Åü„ÅÆFirebaseË®≠ÂÆöÊÉÖÂ†±„Çí„Åì„Åì„Å´Ë≤º„Çä‰ªò„Åë ‚ñ≤‚ñ≤‚ñ≤

// --- DOMË¶ÅÁ¥†„ÅÆÂèñÂæó (Â§âÊõ¥„Å™„Åó) ---
const screens = { /* ... */ }; // („Åì„ÅÆÈÉ®ÂàÜ„ÅØ„ÅÇ„Å™„Åü„ÅÆ„Ç≥„Éº„Éâ„ÅÆ„Åæ„Åæ„ÅßOK)
// („Åô„Åπ„Å¶„ÅÆDOMË¶ÅÁ¥†ÂèñÂæó„Ç≥„Éº„Éâ„Çí„Åì„Åì„Å´ÈÖçÁΩÆ)
const screens = {
    login: document.getElementById('login-screen'),
    waiting: document.getElementById('waiting-screen'),
    game: document.getElementById('game-screen'),
    result: document.getElementById('result-screen'),
};
const loginError = document.getElementById('login-error');
const joinRoomButton = document.getElementById('join-room-button');
const roomNameInput = document.getElementById('room-name-input');
const passwordInput = document.getElementById('password-input');
const playerNameInput = document.getElementById('player-name-input');
const waitingRoomName = document.getElementById('waiting-room-name');
const waitingPlayerList = document.getElementById('waiting-player-list');
const waitingMessage = document.getElementById('waiting-message');
const startGameButton = document.getElementById('start-game-button');
const waitingPlayerCount = document.querySelector('#waiting-screen p');
const scoreboardContainer = document.getElementById('scoreboard');
const questionBox = document.getElementById('question-box');
const gameStatus = document.getElementById('game-status');
const buzzerButton = document.getElementById('buzzer-button');
const answerForm = document.getElementById('answer-form');
const answerInput = document.getElementById('answer-input');
const resultMessage = document.getElementById('result-message');
const finalScoreboard = document.getElementById('final-scoreboard');
const newGameButton = document.getElementById('new-game-button');
const goToLoginButton = document.getElementById('go-to-login-button');
const correctPopup = document.getElementById('correct-popup');

// --- „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞ ---
let currentRoomName = null;
let currentPlayerId = null;
let roomRef = null;
let roomListener = null;
let questionIntervalId = null;
let isHost = false;
// ‚òÖ‚òÖ‚òÖ „Åì„Åì„Å´Êñ∞„Åó„ÅèËøΩÂä† ‚òÖ‚òÖ‚òÖ
let isAuthReady = false;
let currentUser = null;
// (ÂÆöÊï∞„Å™„Å©„ÇÇÂ§âÊõ¥„Å™„Åó)
const MAX_PLAYERS = 4;
const WIN_SCORE = 7;
const LOSE_MISSES = 3;
// Ë™çË®ºÂÆå‰∫Ü„Éï„É©„Ç∞
let authenticationComplete = false;


// --- ÁîªÈù¢ÈÅ∑Áßª (Â§âÊõ¥„Å™„Åó) ---
function showScreen(screenName) { /* ... */ } // („Åì„ÅÆÈÉ®ÂàÜ„ÅØ„ÅÇ„Å™„Åü„ÅÆ„Ç≥„Éº„Éâ„ÅÆ„Åæ„Åæ„ÅßOK)

// --- „ÇØ„Ç§„Ç∫„ÅÆÂ±±Êú≠„Çí‰ΩúÊàê (Â§âÊõ¥„Å™„Åó) ---
function createShuffledDeck() { /* ... */ } // („Åì„ÅÆÈÉ®ÂàÜ„ÅØ„ÅÇ„Å™„Åü„ÅÆ„Ç≥„Éº„Éâ„ÅÆ„Åæ„Åæ„ÅßOK)


// --- „É´„Éº„É†„Å∏„ÅÆÂèÇÂä†/‰ΩúÊàêÂá¶ÁêÜÔºàË™çË®ºÂØæÂøúÁâàÔºâ ---
async function handleJoinRoom() {
    const roomName = roomNameInput.value.trim();
    const password = passwordInput.value;
    const playerName = playerNameInput.value.trim();

    if (!roomName || !playerName) {
        loginError.textContent = '„É´„Éº„É†Âêç„Å®„ÅÇ„Å™„Åü„ÅÆÂêçÂâç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ';
        return;
    }

    loginError.textContent = '';
    joinRoomButton.disabled = true;

    try {
        // ‚òÖ‚òÖ‚òÖ 1. ÂåøÂêçË™çË®º„ÇíÂÆüË°å ‚òÖ‚òÖ‚òÖ
        if (!auth.currentUser) {
            console.log('ÂåøÂêçË™çË®ºÈñãÂßã...');
            await auth.signInAnonymously();
            // Ë™çË®ºÂÆå‰∫Ü„ÇíÂæÖ„Å§
            await new Promise(resolve => {
                const unsubscribe = auth.onAuthStateChanged(user => {
                    if (user) {
                        unsubscribe();
                        resolve();
                    }
                });
            });
        }

        currentPlayerId = auth.currentUser.uid;
        console.log('Ë™çË®ºÊ∏à„ÅøUID:', currentPlayerId);

        // ‚òÖ‚òÖ‚òÖ 2. „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É´„Éº„É´ÂèçÊò†„ÅÆ„Åü„ÇÅÂ∞ë„ÅóÂæÖÊ©ü ‚òÖ‚òÖ‚òÖ
        await new Promise(resolve => setTimeout(resolve, 500));

        currentRoomName = roomName;
        roomRef = db.ref(`rooms/${currentRoomName}`);

        // ‚òÖ‚òÖ‚òÖ 3. „Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥„Åß„É´„Éº„É†ÂèÇÂä† ‚òÖ‚òÖ‚òÖ
        const result = await roomRef.transaction((room) => {
            if (room === null) {
                // Êñ∞Ë¶è„É´„Éº„É†‰ΩúÊàê
                isHost = true;
                return {
                    password: password,
                    playerCount: 1,
                    players: {
                        [currentPlayerId]: { 
                            name: playerName, 
                            score: 0, 
                            misses: 0, 
                            host: true 
                        }
                    },
                    gameState: 'waiting',
                    hostId: currentPlayerId
                };
            } else {
                // Êó¢Â≠ò„É´„Éº„É†ÂèÇÂä†
                if (room.password && room.password !== password) {
                    return; // „Éë„Çπ„ÉØ„Éº„Éâ‰∏ç‰∏ÄËá¥„Åß‰∏≠Êñ≠
                }
                
                const currentCount = room.playerCount || 0;
                if (currentCount >= MAX_PLAYERS) {
                    return; // Ê∫ÄÂì°„Åß‰∏≠Êñ≠
                }

                isHost = false;
                if (!room.players) room.players = {};
                
                room.players[currentPlayerId] = { 
                    name: playerName, 
                    score: 0, 
                    misses: 0, 
                    host: false 
                };
                room.playerCount = currentCount + 1;
                
                return room;
            }
        });

        if (!result.committed) {
            // „Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥Â§±Êïó„ÅÆÂ†¥Âêà
            const snapshot = await roomRef.once('value');
            const room = snapshot.val();
            if (room && room.password && room.password !== password) {
                loginError.textContent = '„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÈÅï„ÅÑ„Åæ„Åô„ÄÇ';
            } else {
                loginError.textContent = '„Åì„ÅÆ„É´„Éº„É†„ÅØÊ∫ÄÂì°„Åß„Åô„ÄÇ';
            }
            await auth.signOut();
            return;
        }

        // ÂèÇÂä†ÊàêÂäü
        console.log('„É´„Éº„É†ÂèÇÂä†ÊàêÂäüÔºÅ');
        setupRoomListener();

    } catch (error) {
        console.error("„É´„Éº„É†ÂèÇÂä†Âá¶ÁêÜ„Ç®„É©„Éº:", error);
        loginError.textContent = '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ';
    } finally {
        joinRoomButton.disabled = false;
    }
}


// --- „É´„Éº„É†„ÅÆÁä∂ÊÖã„ÇíÁõ£Ë¶ñÔºà‰øÆÊ≠£ÁâàÔºâ ---
function setupRoomListener() {
    if (roomListener) roomRef.off('value', roomListener);
    
    roomListener = roomRef.on('value', (snapshot) => {
        const room = snapshot.val();
        if (!room) {
            if (questionIntervalId) clearInterval(questionIntervalId);
            alert('„É´„Éº„É†„ÅåÂâäÈô§„Åï„Çå„Åæ„Åó„Åü„ÄÇ');
            location.reload();
            return;
        }
        
        // „Éó„É¨„Ç§„É§„Éº„ÅåÂ≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        if (!room.players || !room.players[currentPlayerId]) {
            alert('„É´„Éº„É†„Åã„ÇâÈÄÄÂá∫„Åó„Åæ„Åó„Åü„ÄÇ');
            location.reload();
            return;
        }
        
        updateUI(room);
    });

    // Êé•Á∂öÂàáÊñ≠ÊôÇ„ÅÆÂá¶ÁêÜ
    const playerRef = roomRef.child(`players/${currentPlayerId}`);
    const playerCountRef = roomRef.child('playerCount');
    
    playerRef.onDisconnect().remove();
    playerCountRef.onDisconnect().transaction(currentCount => {
        return currentCount ? currentCount - 1 : null;
    });
    // ‚òÖ‚òÖ‚òÖ ‰øÆÊ≠£ÁÇπÔºöÊé•Á∂ö„ÅåÂàá„Çå„ÅüÊôÇ„ÅÆ„Ç´„Ç¶„É≥„Çø„ÉºÊõ¥Êñ∞Âá¶ÁêÜ„ÇíËøΩÂä† ‚òÖ‚òÖ‚òÖ
    const playerRef = ref(db, `rooms/${currentRoomName}/players/${currentPlayerId}`);
    const playerCountRef = ref(db, `rooms/${currentRoomName}/playerCount`);

    // Êé•Á∂ö„ÅåÂàá„Çå„Åü„Çâ„Éó„É¨„Ç§„É§„Éº„Éá„Éº„Çø„ÇíÊ∂à„Åô„Çà„ÅÜ„Å´‰∫àÁ¥Ñ
    onDisconnect(playerRef).remove();
    
    // Êé•Á∂ö„ÅåÂàá„Çå„Åü„Çâ„Ç´„Ç¶„É≥„Çø„Éº„Çí-1„Åô„Çã„Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥„Çí‰∫àÁ¥Ñ
    onDisconnect(playerCountRef).transaction((currentCount) => {
        // currentCount„Åånull(„É´„Éº„É†„ÅåÊ∂àÊªÖÊ∏à„Åø„Å™„Å©)„Åß„Å™„Åë„Çå„Å∞„ÄÅ-1„Åô„Çã
        return currentCount ? currentCount - 1 : null;
    });
}

// („Åì„Åì„Åã„Çâ‰∏ã„ÅÆUIÊõ¥Êñ∞„ÇÑ„Ç≤„Éº„É†„É≠„Ç∏„ÉÉ„ÇØ„ÅÆÈñ¢Êï∞„ÅØ„ÄÅ„ÅÇ„Å™„Åü„ÅÆÂÖÉ„ÅÆ„Ç≥„Éº„Éâ„ÅÆ„Åæ„Åæ„ÅßOK„Åß„Åô)
// (Firebase„Å∏„ÅÆÂëΩ‰ª§ÈÉ®ÂàÜ„ÅØÊó¢„Å´v9ÂΩ¢Âºè„Å´„Å™„Å£„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅ‰øÆÊ≠£„ÅÆÂøÖË¶Å„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì)

// UI„ÅÆÊõ¥Êñ∞ (Â§âÊõ¥„Å™„Åó)
function updateUI(room) { /* ... „ÅÇ„Å™„Åü„ÅÆ„Ç≥„Éº„Éâ„ÅÆ„Åæ„Åæ ... */ }
function updateScoreboard(players) { /* ... „ÅÇ„Å™„Åü„ÅÆ„Ç≥„Éº„Éâ„ÅÆ„Åæ„Åæ ... */ }
function showCorrectEffect() { /* ... „ÅÇ„Å™„Åü„ÅÆ„Ç≥„Éº„Éâ„ÅÆ„Åæ„Åæ ... */ }

// „Ç≤„Éº„É†ÈñãÂßã
async function handleStartGame() {
    try {
        const shuffledDeck = createShuffledDeck();
        if (shuffledDeck.length === 0) { return; }
        const firstQuestionIndex = shuffledDeck.shift();
        
        await update(roomRef, {
            gameState: 'playing',
            currentQuestion: window.quizData[firstQuestionIndex],
            questionDeck: shuffledDeck,
            buzzer: null,
            gameStatusText: ''
        });
    } catch (error) { console.error("„Ç≤„Éº„É†ÈñãÂßã„Ç®„É©„Éº:", error); }
}

// Êó©Êäº„ÅóÂá¶ÁêÜ
function handleBuzzerPress() {
    const buzzerRef = ref(db, `rooms/${currentRoomName}/buzzer`);
    runTransaction(buzzerRef, (currentBuzzer) => {
        return currentBuzzer === null ? { pressedBy: currentPlayerId } : undefined;
    });
}

// ÂõûÁ≠îÂá¶ÁêÜ
async function handleAnswerSubmit(e) {
    e.preventDefault();
    const submittedAnswer = answerInput.value.trim();
    if (!submittedAnswer) return;

    answerForm.classList.add('hidden');
    answerInput.value = '';

    const snapshot = await get(roomRef);
    const room = snapshot.val();
    // ( ... „Åì„Åì„Åã„ÇâÂÖà„ÅÆ„ÅÇ„Å™„Åü„ÅÆÂõûÁ≠îÂà§ÂÆö„É≠„Ç∏„ÉÉ„ÇØ„ÅØÂ§âÊõ¥„ÅÆÂøÖË¶Å„Å™„Åó ... )
}

// Êñ∞„Åó„ÅÑ„Ç≤„Éº„É†
async function handleNewGame() {
    const snapshot = await get(roomRef);
    const room = snapshot.val();
    const updates = {};
    Object.keys(room.players).forEach(playerId => {
        updates[`/players/${playerId}/score`] = 0;
        updates[`/players/${playerId}/misses`] = 0;
    });
    // ‚òÖ‚òÖ‚òÖ Ë£úË∂≥ÔºöÊñ∞„Åó„ÅÑ„Ç≤„Éº„É†„ÅÆÈöõ„Å´playerCount„ÅØ„É™„Çª„ÉÉ„Éà‰∏çË¶Å„Åß„Åô ‚òÖ‚òÖ‚òÖ
    // („É°„É≥„Éê„Éº„ÅØÂ§â„Çè„Çâ„Å™„ÅÑ„Åü„ÇÅ)
    await update(roomRef, updates); 
}


// ‚ñº‚ñº‚ñº ÈÄÄÂá∫Âá¶ÁêÜ„ÅÆ‰øÆÊ≠£ ‚ñº‚ñº‚ñº
// „Äå„É≠„Ç∞„Ç§„É≥ÁîªÈù¢„Å´Êàª„Çã„Äç„Éú„Çø„É≥„ÅÆÂá¶ÁêÜ„Çí‰øÆÊ≠£
goToLoginButton.addEventListener('click', async () => {
    if (roomRef && currentPlayerId) {
        await roomRef.child(`players/${currentPlayerId}`).remove();
        
        // playerCount„ÇíÊ∏õ„Çâ„Åô
        await roomRef.child('playerCount').transaction(currentCount => {
            return currentCount ? currentCount - 1 : null;
        });
    }
    
    if (auth.currentUser) {
        await auth.signOut();
    }
    
    location.reload();
});


// --- ÂàùÊúüÁîªÈù¢Ë°®Á§∫ (Â§âÊõ¥„Å™„Åó) ---
showScreen('login');
